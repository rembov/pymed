#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#define ANALOG_PIN A0  
#define EEPROM_SIZE 64  
#define MAX_ATTEMPTS 20 
ESP8266WebServer server(80);
struct Config {
  char ssid[32];
  char password[32];
};
Config config;
String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>WiFi Setup</title>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial; padding: 20px; text-align: center; }
    input, button { margin: 10px 0; padding: 10px; width: 80%%; max-width: 300px; }
  </style>
</head>
<body>
  <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi</h2>
  <form method="post" action="/save">
    <label>SSID: <input type="text" name="ssid"></label><br>
    <label>Password: <input type="password" name="password"></label><br>
    <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
  </form>
</body>
</html>
)rawliteral";
void setup() {
  Serial.begin(115200);
  Serial.println("\n–ó–∞–ø—É—Å–∫ ESP8266...");
  EEPROM.begin(EEPROM_SIZE);
   EEPROM.get(0, config);
   Serial.print("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π SSID: ");
  Serial.println(config.ssid);
  Serial.print("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ");
  Serial.println(config.password);
  if (strlen(config.ssid) > 0) {
    Serial.println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Ç–∏...");
    WiFi.begin(config.ssid, config.password);
       int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < MAX_ATTEMPTS) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
  }
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Wi-Fi! –ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞...");
    WiFi.mode(WIFI_AP);
    WiFi.softAP("MicSetup", "12345678");
    Serial.println("‚úÖ –¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ 'MicSetup' —Å–æ–∑–¥–∞–Ω–∞.");
    Serial.println("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://192.168.4.1/");
    server.on("/", HTTP_GET, handleRoot);
    server.on("/save", HTTP_POST, handleSave);
  } else {
    Serial.println("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Wi-Fi!");
    Serial.print("üåç IP-–∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
    server.on("/data", HTTP_GET, handleData);
  }
  server.begin();
  Serial.println("üì° –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!");
}
void loop() {
  server.handleClient();
}
void handleRoot() {
  server.send(200, "text/html", html);
}
void handleSave() {
  if (server.hasArg("ssid") && server.hasArg("password")) {
    String newSSID = server.arg("ssid");
    String newPassword = server.arg("password");

    Serial.println("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Wi-Fi –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...");
    Serial.print("üîó –ù–æ–≤—ã–π SSID: ");
    Serial.println(newSSID);
    memset(&config, 0, sizeof(Config));
    strncpy(config.ssid, newSSID.c_str(), sizeof(config.ssid) - 1);
    strncpy(config.password, newPassword.c_str(), sizeof(config.password) - 1);
    EEPROM.put(0, config);
    if (!EEPROM.commit()) {
      Serial.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ EEPROM!");
    } else {
      Serial.println("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
    }
    String response = R"rawliteral(
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta http-equiv="refresh" content="3;url=/" />
      <title>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</title>
      <style>body { font-family: Arial; text-align: center; padding: 50px; }</style>
    </head>
    <body>
      <h2>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</h2>
      <p>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...</p>
    </body>
    </html>
    )rawliteral";
    server.send(200, "text/html", response);
    delay(2000);
    ESP.restart();
  } else {
    server.send(400, "text/plain", "–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã.");
  }
}
void handleData() {
  int micValue = analogRead(ANALOG_PIN);
  server.send(200, "text/plain", String(micValue));
}

